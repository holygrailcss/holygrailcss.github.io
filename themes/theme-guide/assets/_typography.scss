/*+------------------------------------------------------------+
 |       -HTML REMS        
 +------------------------------------------------------------+*/
html {
  font-size: 1rem;
  @include font-regular();

  @media all and (max-width: 640px) {
    overflow-x: hidden;
  }

  @media all and (min-width: $break-xs) {
    font-size: calc(1rem + 0.5vw);
  }

  @media all and (min-width: $break-xs + 700) {
    font-size: calc(1rem + 0.2vw);
  }

  @media all and (min-width: $break-xs + 1100) {
    font-size: calc(1rem + 0.3vw);
  }

  @media all and (min-width: $break-xs + 1400) {
    font-size: calc(1rem + 0.4vw);
  }
}

select {
  @include font-regular();
}

/*+------------------------------------------------------------+
 |       -HEADERS EL√ÅSTICOS        
 +------------------------------------------------------------+*/
p {
  @include font-regular();
  margin: 0;
  font-size: 14px;

  &.b {
    @include font-medium();
    color: $primary;
  }
}

.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
.p1 {
  span {
    color: $primary;
  }
}

b,
mark {
  color: $primary;
  @include font-bold()
}

/*+------------------------------------------------------------+
 |       -LINKS        
 +------------------------------------------------------------+*/
.text-1 {
  font-size: 16px;
}

.text-2 {
  font-size: 18px;
  line-height: 1.6;
}

label {
  float: left;
  font-size: 14px;
  float: left;
  font-size: 14px;
  padding-bottom: 4px;
}


//array para elementos fijos
@mixin types($breakpoints, $headers, $cssattr) {
  @for $i from 1 through length($breakpoints) {

    // map-key
    @media (min-width: nth(map-values($breakpoints), $i)) {

      @each $name,
      $fsize in $headers {
        $fontsize: nth($fsize, $i);
        $fontheight: nth($fsize, 5);
        $fontweight: nth($fsize, 6);

        .#{$name} {
          #{$cssattr }: $fontsize;
          line-height: $fontheight;
          @include fonters($fontweight);
        }
      }
    }
  }
}

@mixin typesFixers($headersFixers, $cssattr) {
  @for $i from 1 through 1 {

    @each $name,
    $fsize in $headersFixers {
      $fontsize: nth($fsize, $i);
      $fontheight: nth($fsize, 2);

      .text-#{$name}-r {
        @include fonters(regular);
        #{$cssattr }: $fontsize;
        line-height: $fontheight;
      }

      .text-#{$name}-m {
        @include fonters(medium);
        #{$cssattr }: $fontsize;
        line-height: $fontheight;
      }

      .text-#{$name}-b {
        @include fonters(bold);
        #{$cssattr }: $fontsize;
        line-height: $fontheight;
      }
    }
  }
}

@for $i from 1 through length($breakpoints) {}

@include typesFixers($headersFixers, $fs);
@include types($breakpoints, $headers, $fs);



/*+-----------------------------------------------------------------------------------------+
 |       -FLUID TEXT   Desde min_width   hasta  break-lg  <--->  font-minima hasta font-maxima
 +-------------------------------------------------------------------------------------------+*/
 


.fluid-h1 {
  @include fluid-text($min_width, $break-lg, 30px, 88px);
  @include font-regular()
}

.fluid-h2 {
  @include fluid-text($min_width, $break-lg, 24px, 48px);
  line-height: 1.2;
  @include font-bold()
}

.fluid-h3 {
  @include fluid-text($min_width, $break-lg, 18px, 24px);
  line-height: 1.2;
  @include font-light()
}

.fluid-h4 {
  @include fluid-text($min_width, $break-lg, 16px, 22px);
  line-height: 1.2;
  @include font-bold()
}

.fluid-h5 {
  @include fluid-text($min_width, $break-lg, 14px, 20px);
  line-height: 1.2;
  @include font-medium()
}

.fluid-h6 {
  @include fluid-text($min_width, $break-lg, 14px, 18px);
  font-size: calc(1em + 0.25vw);
  @include font-light()
}

.fluid-h7 {
  @include fluid-text($min_width, $break-lg, 12px, 18px);
  @include font-regular()
}
